# if you update this file, please consider updating Vagrantfile too

language: cpp

env:
  global:
    - CCACHE_CPP2=1
    - CCACHE_DISABLE=1
    - JOBS=4
    - QT_FATAL_WARNINGS=1
    - SHADOW_BUILD_DIR=/tmp/shadow_build_dir
    - QT_SHORT_VERSION=5.9
    - QT_FULL_VERSION=${QT_SHORT_VERSION}.3

matrix:
    fast_finish: true
    include:
        - os: linux
          dist: trusty
          env: SPEC=linux-g++-64 CONFIG=installer
          sudo: required
        - os: linux
          dist: trusty
          env: SPEC=linux-g++-64 CONFIG=debug
          sudo: required
        - os: android
          language: android
          env: SPEC=android-g++ CONFIG=installer
          sudo: false
        - os: osx
          osx_image: xcode9
          env: SPEC=macx-clang CONFIG=installer
          sudo: required

android:
  components:
    - android-21
    - build-tools-21.1.1
    - platform-tools

addons:
  apt:
    packages:
    - ccache
    - espeak
    - libespeak-dev
    - libgstreamer-plugins-base1.0-dev
    - libgstreamer1.0-0:amd64
    - libgstreamer1.0-dev
    - libsdl2-dev
    - libudev-dev
    - wget
    - libusb-1.0.0-dev
    - libblkid-dev
    - liblzma-dev

cache:
  directories:
    - $HOME/.ccache

before_install:
  # fetch entire git repo to properly determine the version
  - if [ "${CONFIG}" = "installer" ]; then
        cd ${TRAVIS_BUILD_DIR} && git fetch --unshallow && git fetch --all --tags;
    fi

  # compile threads
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        export JOBS=$((`cat /proc/cpuinfo | grep -c ^processor`+1));
    elif [ "${TRAVIS_OS_NAME}" = "osx" ]; then
        export JOBS=$((`sysctl -n hw.ncpu`+1));
    fi

  # clouds urls
  - export QGC_CLOUD="https://s3-us-west-2.amazonaws.com/qgroundcontrol/dependencies"
  - export QT_CLOUD="https://storage.googleapis.com/test-vld-bucket"

  # qt names
  - export QT_FOLDER_NAME="Qt${QT_FULL_VERSION}-${SPEC}"
  - export QT_PACKAGE_NAME="${QT_FOLDER_NAME}.tar.bz2"

  - export QT_DIR="/tmp/${QT_FOLDER_NAME}/${SPEC}/"

  # general paths
  - export QT_QPA_PLATFORM_PLUGIN_PATH="${QT_DIR}/plugins"
  - export QML2_IMPORT_PATH="${QT_DIR}/qml"
  - export PATH="${QT_DIR}/bin:$PATH"


install:

  - wget "${QT_CLOUD}/${QT_PACKAGE_NAME}"
  - tar -jxf "${QT_PACKAGE_NAME}" -C /tmp

  # linux exports 
  - if [ "${SPEC}" = "linux-g++-64" ]; then
        export PATH="${QT_DIR}/bin:$PATH" &&
        export DISPLAY=:99.0 &&
        sh -e /etc/init.d/xvfb start
        ;
    fi

  # osx dependencies: qt, gstreamer, gstreamer-devel
  - if [ "${SPEC}" = "macx-clang" ]; then
        brew update &&
        brew install xz &&
        GSTRMR_PKG="gstreamer-1.0-1.5.2-x86_64.pkg" &&
        wget "${QGC_CLOUD}/${GSTRMR_PKG}" &&
        sudo installer -verboseR -pkg "${GSTRMR_PKG}" -target / &&
        GSTRMR_DEV_PKG="gstreamer-1.0-devel-1.5.2-x86_64.pkg" &&
        wget "${QGC_CLOUD}/${GSTRMR_DEV_PKG}" &&
        sudo installer -verboseR -pkg "${GSTRMR_DEV_PKG}" -target / &&
        wget "${QGC_CLOUD}/osx-gstreamer.tar.bz2" &&
        sudo tar jxf "osx-gstreamer.tar.bz2" -C /Library/Frameworks
        ;
    fi

before_script:
  # grab latest PX4 parameter and airframe metadata
  - PX4_PARAMS_CLOUD="http://px4-travis.s3.amazonaws.com/Firmware/master"
  - wget ${PX4_PARAMS_CLOUD}/parameters.xml -O src/FirmwarePlugin/PX4/PX4ParameterFactMetaData.xml
  - wget ${PX4_PARAMS_CLOUD}/airframes.xml  -O src/AutoPilotPlugins/PX4/AirframeFactMetaData.xml

script:
  # run qmake
  - mkdir "${SHADOW_BUILD_DIR}" && cd "${SHADOW_BUILD_DIR}"
  - qmake -r "${TRAVIS_BUILD_DIR}/qgroundcontrol.pro" CONFIG+=${CONFIG} -spec ${SPEC}

  # compile
  - if [ "${SPEC}" != "macx-ios-clang" ]; then
        make -j$JOBS;
    else
        xcodebuild -IDEBuildOperationMaxNumberOfConcurrentCompileTasks=$JOBS -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | xcpretty -c && $(exit ${PIPESTATUS[0]});
    fi

  # unit tests linux
  - if [[ "${SPEC}" = "linux-g++-64" && "${CONFIG}" = "debug" ]]; then
    	mkdir -p ~/.config/QtProject/ && cp ${TRAVIS_BUILD_DIR}/test/qtlogging.ini ~/.config/QtProject/ &&
            ./debug/qgroundcontrol-start.sh --unittest;
    fi
